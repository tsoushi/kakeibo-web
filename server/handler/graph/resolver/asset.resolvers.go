package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"kakeibo-web-server/domain"
	"kakeibo-web-server/handler/graph"
	"kakeibo-web-server/lib/ctxdef"
	"kakeibo-web-server/lib/typeutil"

	"golang.org/x/xerrors"
)

// ID is the resolver for the id field.
func (r *assetResolver) ID(ctx context.Context, obj *domain.Asset) (string, error) {
	return string(obj.ID), nil
}

// Category is the resolver for the category field.
func (r *assetResolver) Category(ctx context.Context, obj *domain.Asset) (*domain.AssetCategory, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, xerrors.Errorf("failed to get user ID from context: %w", err)
	}

	if obj.CategoryID == nil {
		return nil, nil
	}

	category, err := r.usecase.GetAssetCategoryByID(ctx, userID, *obj.CategoryID)
	if err != nil {
		return nil, xerrors.Errorf("failed to get asset category by ID: %w", err)
	}

	return category, nil
}

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input domain.CreateAssetInput) (*domain.Asset, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	var categoryID *domain.AssetCategoryID
	if input.CategoryID != nil {
		categoryID = typeutil.Ptr(domain.AssetCategoryID(*input.CategoryID))
	}

	asset, err := r.usecase.CreateAsset(ctx, userID, input.Name, categoryID)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	return asset, nil
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context, categoryID *string, sortKey domain.AssetSortKey, reverse bool, first *int, after *domain.PageCursor, last *int, before *domain.PageCursor) (*domain.AssetConnection, error) {
	pageParam, err := domain.NewPageParam(first, after, last, before, string(sortKey), reverse)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	var categoryIDPtr *domain.AssetCategoryID
	if categoryID != nil {
		categoryIDPtr = typeutil.Ptr(domain.AssetCategoryID(*categoryID))
	}

	assets, pageInfo, err := r.usecase.GetAssetsByUserIDAndCategoryID(ctx, pageParam, userID, categoryIDPtr)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	return &domain.AssetConnection{
		Nodes:    assets,
		PageInfo: pageInfo,
	}, nil
}

// Asset returns graph.AssetResolver implementation.
func (r *Resolver) Asset() graph.AssetResolver { return &assetResolver{r} }

type assetResolver struct{ *Resolver }
