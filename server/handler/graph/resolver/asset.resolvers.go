package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"kakeibo-web-server/domain"
	"kakeibo-web-server/handler/graph"
	"kakeibo-web-server/lib/ctxdef"

	"golang.org/x/xerrors"
)

// ID is the resolver for the id field.
func (r *assetResolver) ID(ctx context.Context, obj *domain.Asset) (string, error) {
	return string(obj.ID), nil
}

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input domain.CreateAssetInput) (*domain.Asset, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	asset, err := r.usecase.CreateAsset(ctx, userID, input.Name)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	return asset, nil
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context) ([]*domain.Asset, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	assets, err := r.usecase.GetAssetsByUserID(ctx, userID)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	return assets, nil
}

// Asset returns graph.AssetResolver implementation.
func (r *Resolver) Asset() graph.AssetResolver { return &assetResolver{r} }

type assetResolver struct{ *Resolver }
