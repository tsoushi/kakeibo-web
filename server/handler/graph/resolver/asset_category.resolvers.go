package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"kakeibo-web-server/domain"
	"kakeibo-web-server/handler/graph"
	"kakeibo-web-server/lib/ctxdef"
)

// ID is the resolver for the id field.
func (r *assetCategoryResolver) ID(ctx context.Context, obj *domain.AssetCategory) (string, error) {
	return string(obj.ID), nil
}

// Assets is the resolver for the assets field.
func (r *assetCategoryResolver) Assets(ctx context.Context, obj *domain.AssetCategory) ([]*domain.Asset, error) {
	thunk := r.Loaders.AssetsByCategoryLoader.Load(ctx, obj.ID)

	assets, err := thunk()
	if err != nil {
		return nil, fmt.Errorf("failed to load assets for category %s: %w", obj.ID, err)
	}

	return assets, nil
}

// CreateAssetCategory is the resolver for the createAssetCategory field.
func (r *mutationResolver) CreateAssetCategory(ctx context.Context, input domain.CreateAssetCategoryInput) (*domain.AssetCategory, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID from context: %w", err)
	}

	assetCategory, err := r.usecase.CreateAssetCategory(ctx, userID, input.Name)
	if err != nil {
		return nil, fmt.Errorf("failed to create asset category: %w", err)
	}

	return assetCategory, nil
}

// UpdateAssetCategory is the resolver for the updateAssetCategory field.
func (r *mutationResolver) UpdateAssetCategory(ctx context.Context, input domain.UpdateAssetCategoryInput) (*domain.AssetCategory, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID from context: %w", err)
	}

	assetCategory, err := r.usecase.UpdateAssetCategory(ctx, userID, domain.AssetCategoryID(input.ID), input.Name)
	if err != nil {
		return nil, fmt.Errorf("failed to update asset category: %w", err)
	}

	return assetCategory, nil
}

// DeleteAssetCategory is the resolver for the deleteAssetCategory field.
func (r *mutationResolver) DeleteAssetCategory(ctx context.Context, input domain.DeleteAssetCategoryInput) (*domain.AssetCategory, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID from context: %w", err)
	}

	assetCategoryID, err := r.usecase.DeleteAssetCategory(ctx, userID, domain.AssetCategoryID(input.ID))
	if err != nil {
		return nil, fmt.Errorf("failed to delete asset category: %w", err)
	}

	return &domain.AssetCategory{
		ID: assetCategoryID,
	}, nil
}

// AssetCategories is the resolver for the assetCategories field.
func (r *queryResolver) AssetCategories(ctx context.Context, sortKey domain.AssetCategorySortKey, first *int, after *domain.PageCursor, last *int, before *domain.PageCursor) (*domain.AssetCategoryConnection, error) {
	pageParam, err := domain.NewPageParam(first, after, last, before, string(sortKey))
	if err != nil {
		return nil, fmt.Errorf("failed to create page param: %w", err)
	}

	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID from context: %w", err)
	}

	categories, pageInfo, err := r.usecase.GetAssetCategoriesByUserID(ctx, pageParam, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get asset categories by user ID: %w", err)
	}

	return &domain.AssetCategoryConnection{
		Nodes:    categories,
		PageInfo: pageInfo,
	}, nil
}

// AssetCategory returns graph.AssetCategoryResolver implementation.
func (r *Resolver) AssetCategory() graph.AssetCategoryResolver { return &assetCategoryResolver{r} }

type assetCategoryResolver struct{ *Resolver }
