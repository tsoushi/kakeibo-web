package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"kakeibo-web-server/domain"
	"kakeibo-web-server/handler/graph"
	"kakeibo-web-server/lib/ctxdef"

	"golang.org/x/xerrors"
)

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input domain.CreateTagInput) (*domain.Tag, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	tag, err := r.usecase.CreateTag(ctx, userID, input.Name)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	return tag, nil
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, input domain.DeleteTagInput) (string, error) {
	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return "", xerrors.Errorf(": %w", err)
	}

	tag, err := r.usecase.DeleteTag(ctx, userID, domain.TagID(input.ID))
	if err != nil {
		return "", xerrors.Errorf(": %w", err)
	}

	return string(tag), nil
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context, sortKey domain.TagSortKey, reverse bool, first *int, after *domain.PageCursor, last *int, before *domain.PageCursor) (*domain.TagConnection, error) {
	pageParam, err := domain.NewPageParam(first, after, last, before, string(sortKey), reverse)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	userID, err := ctxdef.UserID(ctx)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	tags, pageInfo, err := r.usecase.GetTagsByUserID(ctx, pageParam, userID)
	if err != nil {
		return nil, xerrors.Errorf(": %w", err)
	}

	return &domain.TagConnection{
		Nodes:    tags,
		PageInfo: pageInfo,
	}, nil
}

// ID is the resolver for the id field.
func (r *tagResolver) ID(ctx context.Context, obj *domain.Tag) (string, error) {
	return string(obj.ID), nil
}

// Tag returns graph.TagResolver implementation.
func (r *Resolver) Tag() graph.TagResolver { return &tagResolver{r} }

type tagResolver struct{ *Resolver }
